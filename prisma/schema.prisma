datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  quotes   Quote[]
  authors  Author[]
  content  Content[]
  quoteNote QuoteNote[]
  tag Tag[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model QuoteNote {
  id    String @id @default(cuid())
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  quote Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quoteId String

  author Author @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String 

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contentId String 

}

model Quote {
  id    String @id @default(cuid())
  body String
  // contentTitle String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorName String?
  
  // isFavorited Boolean @default(false)
  isFavorited String @default("notFavorited")

  note QuoteNote[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  author Author @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String 

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contentId String

  tag Tag[]
}

model Author {
  id    String @id @default(cuid())
  name String
  imgUrl String? @default("https://icon-library.com/images/default-user-icon/default-user-icon-8.jpg")

  quote Quote[]
  content Content[]
  quoteNote QuoteNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Content {
  id    String @id @default(cuid())
  title String
  authorName String?
  imgUrl String? @default("https://neelkanthpublishers.com/assets/bookcover_thumb.png")

  author Author @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  quote Quote[]
  quoteNote QuoteNote[]


  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Tag {
  id    String @id @default(cuid())
  body  String

  quote Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quoteId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}
